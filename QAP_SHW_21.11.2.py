# Представьте, что вы являетесь разработчиком в малом архитектурном бюро, специализирующемся на разработке
# круглых конструкций, таких как фонтаны, круглые парковые зоны или круглые здания.
# Вы часто работаете с различными дизайнерскими эскизами, и вам нужно быстро рассчитывать площади и
# диаметры кругов разного размера.
# С помощью Python вы можете упростить этот процесс, создав класс Circle, который принимает радиус круга в
# качестве аргумента и позволяет вычислить его площадь и диаметр.
# Инициализатор принимает радиус в качестве аргумента и устанавливает значение защищенного свойства radius.
# Класс должен:
# геттер и сеттер свойства radius, реализованные через декораторы @property и @radius.setter.
# В сеттере свойства radius должна происходить проверка на то, что значение больше нуля, иначе должна
# вызываться ошибка ValueError("Radius cannot be negative").
# Также добавьте геттер (также через декоратор) с именем area, который возвращает площадь круга.
# В качестве числа возьмите значение 3.14.
# Также добавьте геттер (также через декоратор) с именем diameter, который возвращает диаметр круга
# (удвоенный радиус).

class Circle:
    def __init__(self, radius):
        self._radius = radius

    @property
    def radius(self):
        return self._radius

    @radius.setter
    def radius(self, value):
        if value < 0:
            raise ValueError("Radius cannot be negative")
        self._radius = value

    @property
    def diameter(self):
        return self.radius * 2

    @property
    def area(self):
        return 3.14 * self.radius ** 2
