# Ваша задача — реализовать алгоритм бинарного поиска.
# Он значительно экономит время, ускоряя поиск элемента в отсортированном списке или массиве.
#
# Бинарный поиск позволяет сразу исключить половину элементов,
# в то время как простой линейный поиск проверяет каждый элемент по очереди.
# Это особенно полезно при работе с большими данными.
#
# Нужно, используя рекурсию, перевести на язык Python следующий алгоритм:
#
# 1. Определите средний элемент отсортированного списка.
# 2. Если средний элемент является искомым значением, то поиск завершён.
# 3. Если искомое значение меньше среднего элемента, повторите поиск в левой половине списка.
# 4. Если искомое значение больше среднего элемента, повторите поиск в правой половине списка.
# 5. Если список пуст ( то есть начальная позиция больше конечной), значит, искомого элемента в списке нет.
#
# Определите функцию binary_search, которая принимает первым аргументом список (он уже отсортирован),
# а вторым — элемент, который необходимо найти.
#
# Функция должна возвращать True, если такой элемент есть в списке, и False — если его нет.

def binary_search(lst, target):
   if len(lst) == 0:
       return False
   else:
       midpoint = len(lst) // 2
       if lst[midpoint] == target:
           return True
       else:
           if lst[midpoint] < target:
               return binary_search(lst[midpoint+1:], target)
           else:
               return binary_search(lst[:midpoint], target)