# Условие: Представьте: у вас есть веб-приложение, которое позволяет администраторам создавать,
# просматривать и управлять данными о пользователях. Необходимо удостовериться, что приложение корректно
# обрабатывает данные пользователей и предоставляет правильную функциональность для работы с ними.

#Для начала вам необходимо реализовать функции для обработки данных о пользователе:

# calculate_age(birth_date: str) -> int: Функция позволяет вычислить возраст пользователя на основе его даты рождения.
# В контексте тестирования веб-приложения можно использовать эту функцию для проверки, корректно ли возраст
# пользователя отображается в его профиле. Здесь вам понадобится модуль datetime. Дата рождения всегда будет
# поступать в формате «год-месяц-день».

# filter_adults(users: List[Dict[str, Any]]) -> List[Dict[str, Any]]: Функция фильтрует список пользователей и
# возвращает только совершеннолетних. При тестировании приложения можно передать список пользователей в эту функцию и
# проверить, что она правильно фильтрует данные и возвращает только совершеннолетних пользователей.

# generate_username(first_name: str, last_name: str) -> str: Функция генерирует уникальное имя пользователя на
# основе его имени и фамилии. В контексте тестирования можно использовать эту функцию для проверки,
# что создаваемые имена пользователей уникальны и соответствуют заданному формату.
# Принцип генерирования заключается в следующем: первая буква имени + точка + фамилия, при этом все символы
# должны быть нижнего регистра.

from datetime import date
from typing import List, Dict, Any

def calculate_age(birth_date: str) -> int:
    birth_date = date.fromisoformat(birth_date)
    today = date.today()
    age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
    return age

def filter_adults(users: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    adults = [user for user in users if calculate_age(user['birth_date']) >= 18]
    return adults

def generate_username(first_name: str, last_name: str) -> str:
    username = f"{first_name[0].lower()}.{last_name.lower()}"
    return username

